shadow_array = {0: [[1, 7, 19], [2, 9, 22], [3, 11, 25], [4, 13, 28], [5, 15, 31], [6, 17, 34]],
1: [[7, 19], [8, 21], [2, 10, 24], [3, 12, 27], [0, 5, 15], [18, 35]],
2: [[8, 20], [9, 22], [10, 24], [3, 12, 27], [0, 5, 15], [1, 18, 35]],
3: [[2, 8, 20], [10, 23], [11, 25], [12, 27], [4, 14, 30], [0, 6, 17]],
4: [[0, 1, 7], [3, 10, 23], [12, 26], [13, 28], [14, 30], [5, 16, 33]],
5: [[6, 18, 36], [0, 2, 9], [4, 12, 26], [14, 29], [15, 31], [16, 33]],
6: [[18, 36], [1, 8, 21], [0, 3, 11], [5, 14, 29], [16, 32], [17, 34]],
7: [[19], [20], [8, 9, 23], [1, 0, 4], [18, 17, 33], [36]],
8: [[20], [21], [9, 23], [2, 3, 12], [1, 6, 16], [7, 36]],
9: [[21], [22], [23], [10, 11, 26], [2, 0, 5], [8, 7, 36]],
10: [[9, 21], [23], [24], [11, 26], [3, 4, 14], [2, 1, 18]],
11: [[10, 9, 21], [24], [25], [26], [12, 13, 29], [3, 0, 6]],
12: [[3, 2, 8], [11, 24], [26], [27], [13, 29], [4, 5, 16]],
13: [[4, 0, 1], [12, 11, 24], [27], [28], [29], [14, 15, 32]],
14: [[5, 6, 18], [4, 3, 10], [13, 27], [29], [30], [15, 32]],
15: [[16, 17, 35], [5, 0, 2], [14, 13, 27], [30], [31], [32]],
16: [[17, 35], [6, 1, 8], [5, 4, 12], [15, 30], [32], [33]],
17: [[35], [18, 7, 20], [6, 0, 3], [16, 15, 30], [33], [34]],
18: [[36], [7, 20], [1, 2, 10], [6, 5, 14], [17, 33], [35]],
19: [[], [], [20, 21, 22], [7, 1, 0], [36, 35, 34], []],
20: [[], [], [21, 22], [8, 2, 3], [7, 18, 17], [19]],
21: [[], [], [22], [9, 10, 11], [8, 1, 6], [20, 19]],
22: [[], [], [], [23, 24, 25], [9, 2, 0], [21, 20, 19]],
23: [[22], [], [], [24, 25], [10, 3, 4], [9, 8, 7]],
24: [[23, 22], [], [], [25], [11, 12, 13], [10, 2, 1]],
25: [[24, 23, 22], [], [], [], [26, 27, 28], [11, 3, 0]],
26: [[11, 10, 9], [25], [], [], [27, 28], [12, 4, 5]],
27: [[12, 3, 2], [26, 25], [], [], [28], [13, 14, 15]],
28: [[13, 4, 0], [27, 26, 25], [], [], [], [29, 30, 31]],
29: [[14, 5, 6], [13, 12, 11], [28], [], [], [30, 31]],
30: [[15, 16, 17], [14, 4, 3], [29, 28], [], [], [31]],
31: [[32, 33, 34], [15, 5, 0], [30, 29, 28], [], [], []],
32: [[33, 34], [16, 6, 1], [15, 14, 13], [31], [], []],
33: [[34], [17, 18, 7], [16, 5, 4], [32, 31], [], []],
34: [[], [35, 36, 19], [17, 6, 0], [33, 32, 31], [], []],
35: [[], [36, 19], [18, 1, 2], [17, 16, 15], [34], []],
36: [[], [19], [7, 8, 9], [18, 6, 5], [35, 34], []]}

cycles = [0,1,2,3,4,5, 0, 1,2,3,4,5, 0,1,2,3,4,5, 0,1,2,3,4,5]





import collections
_tree = collections.namedtuple("tree", ["id", "s"])

def tree(id, s):
    assert s < 3 , "size must be less than 3"
    return _tree(id, s)

def grow(a: tree):
    return tree(a.id , a.s+1)

my_other_trees = [tree(0, 1),  tree(1,2), tree(2,2), tree(3,2), tree(4,2), tree(12, 2), tree(11, 2), tree(13, 2)]
his_other_trees =  [tree(10, 2), tree(9, 2), tree(8, 2)]


#tests : 

this_tree = grow(my_other_trees[0])

#print(shadow_array[this_tree.id][cycles[next_day]])

#sun_score = 0 

days_left = day

for next_day in range(days_left): 
    

    for that_tree in my_other_trees : 

        if  (that_tree.s < this_tree.s + 1)  and (that_tree.id in shadow_array[this_tree.id][cycles[next_day]])  :
            score -=1
            #print(f'day {next_day} MY tree {that_tree.id } will be in shadow, score: {score} ')
    for that_tree in his_other_trees : 
        if  (that_tree.s < this_tree.s + 1)  and (that_tree.id in shadow_array[this_tree.id][cycles[next_day]])  :
            score +=1
            #print(f'day {next_day} Her tree {that_tree.id} will be in shadow, score: {score}  ')


#        sum_score -= 1 
#    if his_tree in shadow : 
#        sun_score += 1




"""

#tests : 
cell = 12
size = 1
this_tree = tree(cell, size)
grown_tree = grow(this_tree)
try : 
    too_big = grow(grown_tree)
except: pass

print(f'this_tree : {this_tree}')
print(f'grown_tree : {grown_tree}')


print(my_other_trees)
print(his_other_trees)

"""